<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--1.映射文件的namespace要和mapper接口的全类名保持一致
    2.映射文件中的SQL语句的id要和mapper接口中的方法名一致
-->
<!--resultType写的是这个接口对应的实体类的类名-->
<mapper namespace="com.cy.store.mapper.UserMapper">
    <!--自定义映射规则：resultMap标签来完成映射规则的定义-->
    <!--核心属性
        id属性：给这个映射负责分配一个唯一的id值，对应的就是resultMap=“id属性的值” 属性的取值
        type属性：取值是一个类(类的全称)，表示的是数据库中的查询结果与java中哪一个实体类进行结果集的映射
    -->
    <resultMap id="UserEntityMap" type="com.cy.store.entity.User">
        <!--将表中的字段名和类的属性名不一致的进行匹配，表中的字段名和类中的属性名一致的可以省略不写-->
        <!--主键写在第一个并且他是一定要写的，不管表的字段名和类中的属性名是否一致-->
        <!--column表示表的字段名  property表示类的属性名-->
        <id column="uid" property="uid"/>
        <result column="is_delete" property="isDelete"/>
        <result column="created_user" property="createdUser"/>
        <result column="created_time" property="createdTime"/>
        <result column="modified_user" property="modifiedUser"/>
        <result column="modified_time" property="modifiedTime"/>
    </resultMap>


    <!--Integer insert(User user);-->
    <!--id属性：表示映射的接口中方法的名称，直接在标签的内容步来编写sql语句-->
    <!--
        useGeneratedKeys="true"————开启某一个字符的值的递增
        (因为在数据库中设置了uid为递增,而在mybatis要开启自增才会自增)
        keyProperty="uid"————自增的属性
    -->
    <insert id="insert" useGeneratedKeys="true" keyProperty="uid">
        insert into t_user (
        username, password, salt, phone, email, gender, avatar, is_delete,
                  created_user, created_time, modified_user, modified_time
        ) value (
            #{username}, #{password}, #{salt}, #{phone}, #{email}, #{gender}, #{avatar}, #{isDelete},
            #{createdUser}, #{createdTime}, #{modifiedUser}, #{modifiedTime}
            )
    </insert>

    <!--User findByUsername(String username);-->
    <!--select语句在执行的时候，查询的结果是一个对象/多个对象-->
    <!--resultType:表示查询的结果集类型，只需要指定对应的映射类的类型，并且包含完整的包结构（要求：数据库的表的字段名和类的属性名完全一致）
         eg:resultType="com.cy.store.entity.User"（但是User里的有些属性名没有和字段名一致故不能使用这个）
        resultMap:表示表的字段名和类的属性名不一致时，用来自定义查询结果的映射规则
    -->
    <select id="findByUsername" resultMap="UserEntityMap">
        select * from t_user where username=#{username}

    </select>

    <!--Integer updatePasswordByUid(Integer uid, String password, String modifiedUser, Date modifiedTime);-->
    <update id="updatePasswordByUid">
        update t_user set
                password=#{password}, modified_user=#{modifiedUser}, modified_time=#{modifiedTime}
                where uid=#{uid}
    </update>

    <!--User findByUid(Integer uid);-->
    <select id="findByUid" resultMap="UserEntityMap">
        select  * from t_user where uid=#{uid}
    </select>

    <!--Integer updateInfoByUid(User user);-->
    <update id="updateInfoByUid">
        update t_user set
        <if test="phone != null">phone = #{phone},</if>
        <if test="email != null">email = #{email},</if>
        <if test="gender != null">gender = #{gender},</if>
        modified_user = #{modifiedUser},
        modified_time = #{modifiedTime}
        where uid=#{uid}
    </update>

    <!--Integer updateAvatarByUid(@Param("uid") Integer uid, @Param("avatar")String avatar, @Param("modifiedUser")String modifiedUser, @Param("modifiedTime")Date modifiedTime);-->
    <update id="updateAvatarByUid">
        update t_user set
                          avatar=#{avatar},
                          modified_user=#{modifiedUser}, modified_time=#{modifiedTime}
        where uid=#{uid}
    </update>

</mapper>